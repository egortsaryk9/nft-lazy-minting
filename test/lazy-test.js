const { expect } = require("chai");
const { ethers } = require("hardhat");
const { LazyMinter } = require('../lib')
const { describe, it } = require('mocha');

async function deploy(isTest = false) {
  let minter;
  let redeemer;
  if (isTest) {
      let [faucet, ] = await ethers.getSigners();
      let provider = ethers.provider;

      let privateKey1 = "0xfcbaaa84143a2318f8c8f6ddd0b052994ca4275d480e73b4da058ad398ed6680";
      minter = new ethers.Wallet(privateKey1, provider);
      let amountInEther = '2';

      let tx1 = {
        to: minter.address,
        // Convert currency unit from ether to wei
        value: ethers.utils.parseEther(amountInEther)
      };
      faucet.sendTransaction(tx1);
      console.log("minter publicKey ==>", minter.publicKey)

      

      let privateKey2 = "0x30da304055f28e37ca017702c694b1d4d76338e9901f96dcd6499e77bc9967bc";
      redeemer = new ethers.Wallet(privateKey2, provider);
      let tx2 = {
        to: redeemer.address,
        // Convert currency unit from ether to wei
        value: ethers.utils.parseEther(amountInEther)
      };
      faucet.sendTransaction(tx2);
      console.log("redeemer publicKey ==>", redeemer.publicKey)

  } else {
      const [ _minter, _redeemer, _ ] = await ethers.getSigners();
      minter = _minter;
      redeemer = _redeemer;
  }

  console.log("minter address ==>", minter.address)
  console.log("redeemer address ==>", redeemer.address)


  // let factory = await ethers.getContractFactory("LazyNFT", minter)
  let factory = await ethers.getContractFactory(abi, bytecode, minter);
  const contract = await factory.deploy(minter.address)

  // the redeemerContract is an instance of the contract that's wired up to the redeemer's signing key
  const redeemerFactory = factory.connect(redeemer)
  const redeemerContract = redeemerFactory.attach(contract.address)

  return {
    minter,
    redeemer,
    contract,
    redeemerContract,
  }
}

describe("LazyNFT", function() {
  it("Should deploy", async function() {
    const signers = await ethers.getSigners();
    const minter = signers[0].address;

    // const LazyNFT = await ethers.getContractFactory("LazyNFT");
    let LazyNFT = await ethers.getContractFactory(abi, bytecode);

    const lazynft = await LazyNFT.deploy(minter);
    await lazynft.deployed();

  });

  it("Should redeem an NFT from a signed voucher", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: minter })
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi")

    await expect(redeemerContract.redeem(redeemer.address, voucher, signature))
      .to.emit(contract, 'Transfer')  // transfer from null address to minter
      .withArgs('0x0000000000000000000000000000000000000000', minter.address, voucher.tokenId)
      .and.to.emit(contract, 'Transfer') // transfer from minter to redeemer
      .withArgs(minter.address, redeemer.address, voucher.tokenId);
  });

  it("Should fail to redeem an NFT that's already been claimed", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: minter })
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi")

    await expect(redeemerContract.redeem(redeemer.address, voucher, signature))
      .to.emit(contract, 'Transfer')  // transfer from null address to minter
      .withArgs('0x0000000000000000000000000000000000000000', minter.address, voucher.tokenId)
      .and.to.emit(contract, 'Transfer') // transfer from minter to redeemer
      .withArgs(minter.address, redeemer.address, voucher.tokenId);

    await expect(redeemerContract.redeem(redeemer.address, voucher, signature))
      .to.be.revertedWith('ERC721: token already minted')
  });

  it("Should fail to redeem an NFT voucher that's signed by an unauthorized account", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const signers = await ethers.getSigners()
    const rando = signers[signers.length-1];
    
    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: rando })
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi")

    await expect(redeemerContract.redeem(redeemer.address, voucher, signature))
      .to.be.revertedWith('Signature invalid or unauthorized')
  });

  it("Should fail to redeem an NFT voucher that's been modified", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const signers = await ethers.getSigners()
    const rando = signers[signers.length-1];
    
    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: rando })
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi")

    voucher.tokenId = 2
    await expect(redeemerContract.redeem(redeemer.address, voucher, signature))
      .to.be.revertedWith('Signature invalid or unauthorized')
  });

  it("Should redeem if payment is >= minPrice", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy(true)

  const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: minter })
    const minPrice = ethers.constants.WeiPerEther // charge 1 Eth
    const { voucher, signature, digest } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi", minPrice, true)

    console.log("voucher ===>", voucher);
    console.log("signature ===>", signature);
    console.log("digest bytes ===>", digest);
    console.log("digest hex ===>", Buffer.from(digest).toString('hex'));


    await expect(redeemerContract.redeem(redeemer.address, voucher, signature, { value: minPrice }))
      .to.emit(contract, 'Transfer')  // transfer from null address to minter
      .withArgs('0x0000000000000000000000000000000000000000', minter.address, voucher.tokenId)
      .and.to.emit(contract, 'Transfer') // transfer from minter to redeemer
      .withArgs(minter.address, redeemer.address, voucher.tokenId)
  })

  it("Should fail to redeem if payment is < minPrice", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: minter })
    const minPrice = ethers.constants.WeiPerEther.mul(2) // charge 1 Eth
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi", minPrice)

    const payment = minPrice.sub(1000);
    await expect(redeemerContract.redeem(redeemer.address, voucher, signature, { value: payment }))
      // .to.be.revertedWith('Insufficient funds to redeem') // https://github.com/NomicFoundation/hardhat/issues/2489
      .to.be.reverted
  })

  it("Should make payments available to minter for withdrawal", async function() {
    const { contract, redeemerContract, redeemer, minter } = await deploy()

    const lazyMinter = new LazyMinter({ contractAddress: contract.address, signer: minter })
    const minPrice = ethers.constants.WeiPerEther // charge 1 Eth
    const { voucher, signature } = await lazyMinter.createVoucher(1, "ipfs://bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi", minPrice)
    
    // the payment should be sent from the redeemer's account to the contract address
    await expect(await redeemerContract.redeem(redeemer.address, voucher, signature, { value: minPrice }))
      .to.changeEtherBalances([redeemer, contract], [minPrice.mul(-1), minPrice]) 

    // minter should have funds available to withdraw
    expect(await contract.availableToWithdraw()).to.equal(minPrice)

    // withdrawal should increase minter's balance
    await expect(await contract.withdraw())
      .to.changeEtherBalance(minter, minPrice)

    // minter should now have zero available
    expect(await contract.availableToWithdraw()).to.equal(0)
  })

});

const abi = [{"inputs":[{"internalType":"address payable","name":"minter","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"availableToWithdraw","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"redeemer","type":"address"},{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"minPrice","type":"uint256"},{"internalType":"string","name":"uri","type":"string"}],"internalType":"struct LazyNFT.NFTVoucher","name":"voucher","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"redeem","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}];

const bytecode = "6101406040523480156200001257600080fd5b50604051620029683803806200296883398101604081905262000035916200024c565b6040518060400160405280600f81526020016e2630bd3ca7232a16ab37bab1b432b960891b815250604051806040016040528060018152602001603160f81b8152506040518060400160405280600781526020016613185e9e53919560ca1b815250604051806040016040528060038152602001622620ad60e91b8152508160009081620000c4919062000323565b506001620000d3828262000323565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c0948501909152815191909601209052929092526101205250620001917f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68262000198565b50620003ef565b620001a48282620001a8565b5050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620001a45760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002083390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000602082840312156200025f57600080fd5b81516001600160a01b03811681146200027757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002a957607f821691505b602082108103620002ca57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200031e57600081815260208120601f850160051c81016020861015620002f95750805b601f850160051c820191505b818110156200031a5782815560010162000305565b5050505b505050565b81516001600160401b038111156200033f576200033f6200027e565b620003578162000350845462000294565b84620002d0565b602080601f8311600181146200038f5760008415620003765750858301515b600019600386901b1c1916600185901b1785556200031a565b600085815260208120601f198616915b82811015620003c0578886015182559484019460019091019084016200039f565b5085821015620003df5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516125296200043f6000396000611bda01526000611c2901526000611c0401526000611b5d01526000611b8701526000611bb101526125296000f3fe6080604052600436106101405760003560e01c80636352211e116100b6578063b88d4fde1161006f578063b88d4fde14610386578063c87b56dd146103a6578063d5391393146103c6578063d547741f146103fa578063e322ad2b1461041a578063e985e9c51461043c57600080fd5b80636352211e146102dc57806370a08231146102fc57806391d148541461031c57806395d89b411461033c578063a217fddf14610351578063a22cb4651461036657600080fd5b806323b872dd1161010857806323b872dd14610217578063248a9ca3146102375780632f2ff15d1461026757806336568abe146102875780633ccfd60b146102a757806342842e0e146102bc57600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d45780631c098e90146101f6575b600080fd5b34801561015157600080fd5b50610165610160366004611d7a565b610485565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104a5565b6040516101719190611de7565b3480156101a857600080fd5b506101bc6101b7366004611dfa565b610537565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef366004611e2f565b61055e565b005b610209610204366004611efc565b610678565b604051908152602001610171565b34801561022357600080fd5b506101f4610232366004611f78565b6107f5565b34801561024357600080fd5b50610209610252366004611dfa565b60009081526007602052604090206001015490565b34801561027357600080fd5b506101f4610282366004611fb4565b610826565b34801561029357600080fd5b506101f46102a2366004611fb4565b61084b565b3480156102b357600080fd5b506101f46108c9565b3480156102c857600080fd5b506101f46102d7366004611f78565b61098e565b3480156102e857600080fd5b506101bc6102f7366004611dfa565b6109a9565b34801561030857600080fd5b50610209610317366004611fe0565b610a09565b34801561032857600080fd5b50610165610337366004611fb4565b610a8f565b34801561034857600080fd5b5061018f610aba565b34801561035d57600080fd5b50610209600081565b34801561037257600080fd5b506101f4610381366004611ffb565b610ac9565b34801561039257600080fd5b506101f46103a1366004612037565b610ad4565b3480156103b257600080fd5b5061018f6103c1366004611dfa565b610b0c565b3480156103d257600080fd5b506102097f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561040657600080fd5b506101f4610415366004611fb4565b610c1c565b34801561042657600080fd5b5033600090815260086020526040902054610209565b34801561044857600080fd5b5061016561045736600461209f565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061049082610c41565b8061049f575061049f82610c91565b92915050565b6060600080546104b4906120c9565b80601f01602080910402602001604051908101604052809291908181526020018280546104e0906120c9565b801561052d5780601f106105025761010080835404028352916020019161052d565b820191906000526020600020905b81548152906001019060200180831161051057829003601f168201915b5050505050905090565b600061054282610cb6565b506000908152600460205260409020546001600160a01b031690565b6000610569826109a9565b9050806001600160a01b0316836001600160a01b0316036105db5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105f757506105f78133610457565b6106695760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105d2565b6106738383610d18565b505050565b6000806106858484610d86565b90506106b17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610a8f565b6107075760405162461bcd60e51b815260206004820152602160248201527f5369676e617475726520696e76616c6964206f7220756e617574686f72697a656044820152601960fa1b60648201526084016105d2565b836020013534101561075b5760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742066756e647320746f2072656465656d0000000060448201526064016105d2565b610766818535610df5565b6107b284356107786040870187612103565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f3792505050565b6107be81868635610fca565b6001600160a01b038116600090815260086020526040812080543492906107e6908490612160565b90915550509235949350505050565b6107ff3382611166565b61081b5760405162461bcd60e51b81526004016105d290612173565b610673838383610fca565b600082815260076020526040902060010154610841816111e4565b61067383836111ee565b6001600160a01b03811633146108bb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105d2565b6108c58282611274565b5050565b6108f37f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610a8f565b61094b5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c7920617574686f72697a6564206d696e746572732063616e20776974686044820152636472617760e01b60648201526084016105d2565b3360008181526008602052604080822080549083905590519091839183156108fc0291849190818181858888f19350505050158015610673573d6000803e3d6000fd5b61067383838360405180602001604052806000815250610ad4565b6000818152600260205260408120546001600160a01b03168061049f5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d2565b60006001600160a01b038216610a735760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105d2565b506001600160a01b031660009081526003602052604090205490565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546104b4906120c9565b6108c53383836112db565b610ade3383611166565b610afa5760405162461bcd60e51b81526004016105d290612173565b610b06848484846113a9565b50505050565b6060610b1782610cb6565b60008281526006602052604081208054610b30906120c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c906120c9565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b505050505090506000610bc760408051602081019091526000815290565b90508051600003610bd9575092915050565b815115610c0b578082604051602001610bf39291906121c1565b60405160208183030381529060405292505050919050565b610c14846113dc565b949350505050565b600082815260076020526040902060010154610c37816111e4565b6106738383611274565b60006001600160e01b031982166380ac58cd60e01b1480610c7257506001600160e01b03198216635b5e139f60e01b145b8061049f57506301ffc9a760e01b6001600160e01b031983161461049f565b60006001600160e01b03198216637965db0b60e01b148061049f575061049f82610c41565b6000818152600260205260409020546001600160a01b0316610d155760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105d2565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d4d826109a9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d9284611450565b9050610c1483610def836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b906114e1565b6001600160a01b038216610e4b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105d2565b6000818152600260205260409020546001600160a01b031615610eb05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105d2565b6001600160a01b0382166000908152600360205260408120805460019290610ed9908490612160565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000828152600260205260409020546001600160a01b0316610fb25760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016105d2565b6000828152600660205260409020610673828261223e565b826001600160a01b0316610fdd826109a9565b6001600160a01b0316146110415760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105d2565b6001600160a01b0382166110a35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105d2565b6110ae600082610d18565b6001600160a01b03831660009081526003602052604081208054600192906110d79084906122fe565b90915550506001600160a01b0382166000908152600360205260408120805460019290611105908490612160565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600080611172836109a9565b9050806001600160a01b0316846001600160a01b031614806111b957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610c145750836001600160a01b03166111d284610537565b6001600160a01b031614949350505050565b610d158133611505565b6111f88282610a8f565b6108c55760008281526007602090815260408083206001600160a01b03851684529091529020805460ff191660011790556112303390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61127e8282610a8f565b156108c55760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b03160361133c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105d2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6113b4848484610fca565b6113c084848484611569565b610b065760405162461bcd60e51b81526004016105d290612311565b60606113e782610cb6565b60006113fe60408051602081019091526000815290565b9050600081511161141e5760405180602001604052806000815250611449565b806114288461166a565b6040516020016114399291906121c1565b6040516020818303038152906040525b9392505050565b600061049f7f6316f9ddd4d59a364f3b95c26bab9d392c3380ace0fff15e91ed76f0d8bcd15a8335602085013561148a6040870187612103565b604051611498929190612363565b6040519081900381206114c69493929160200193845260208401929092526040830152606082015260800190565b6040516020818303038152906040528051906020012061176b565b60008060006114f085856117b9565b915091506114fd816117fe565b509392505050565b61150f8282610a8f565b6108c557611527816001600160a01b031660146119b4565b6115328360206119b4565b604051602001611543929190612373565b60408051601f198184030181529082905262461bcd60e51b82526105d291600401611de7565b60006001600160a01b0384163b1561165f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906115ad9033908990889088906004016123e8565b6020604051808303816000875af19250505080156115e8575060408051601f3d908101601f191682019092526115e591810190612425565b60015b611645573d808015611616576040519150601f19603f3d011682016040523d82523d6000602084013e61161b565b606091505b50805160000361163d5760405162461bcd60e51b81526004016105d290612311565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c14565b506001949350505050565b6060816000036116915750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116bb57806116a581612442565b91506116b49050600a83612471565b9150611695565b60008167ffffffffffffffff8111156116d6576116d6611e59565b6040519080825280601f01601f191660200182016040528015611700576020820181803683370190505b5090505b8415610c14576117156001836122fe565b9150611722600a86612485565b61172d906030612160565b60f81b81838151811061174257611742612499565b60200101906001600160f81b031916908160001a905350611764600a86612471565b9450611704565b600061049f611778611b50565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008082516041036117ef5760208301516040840151606085015160001a6117e387828585611c77565b945094505050506117f7565b506000905060025b9250929050565b6000816004811115611812576118126124af565b0361181a5750565b600181600481111561182e5761182e6124af565b0361187b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105d2565b600281600481111561188f5761188f6124af565b036118dc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105d2565b60038160048111156118f0576118f06124af565b036119485760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016105d2565b600481600481111561195c5761195c6124af565b03610d155760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016105d2565b606060006119c38360026124c5565b6119ce906002612160565b67ffffffffffffffff8111156119e6576119e6611e59565b6040519080825280601f01601f191660200182016040528015611a10576020820181803683370190505b509050600360fc1b81600081518110611a2b57611a2b612499565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a5a57611a5a612499565b60200101906001600160f81b031916908160001a9053506000611a7e8460026124c5565b611a89906001612160565b90505b6001811115611b01576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611abd57611abd612499565b1a60f81b828281518110611ad357611ad3612499565b60200101906001600160f81b031916908160001a90535060049490941c93611afa816124dc565b9050611a8c565b5083156114495760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d2565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611ba957507f000000000000000000000000000000000000000000000000000000000000000046145b15611bd357507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611cae5750600090506003611d5b565b8460ff16601b14158015611cc657508460ff16601c14155b15611cd75750600090506004611d5b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611d2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d5457600060019250925050611d5b565b9150600090505b94509492505050565b6001600160e01b031981168114610d1557600080fd5b600060208284031215611d8c57600080fd5b813561144981611d64565b60005b83811015611db2578181015183820152602001611d9a565b50506000910152565b60008151808452611dd3816020860160208601611d97565b601f01601f19169290920160200192915050565b6020815260006114496020830184611dbb565b600060208284031215611e0c57600080fd5b5035919050565b80356001600160a01b0381168114611e2a57600080fd5b919050565b60008060408385031215611e4257600080fd5b611e4b83611e13565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e8057600080fd5b813567ffffffffffffffff80821115611e9b57611e9b611e59565b604051601f8301601f19908116603f01168101908282118183101715611ec357611ec3611e59565b81604052838152866020858801011115611edc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215611f1157600080fd5b611f1a84611e13565b9250602084013567ffffffffffffffff80821115611f3757600080fd5b9085019060608288031215611f4b57600080fd5b90925060408501359080821115611f6157600080fd5b50611f6e86828701611e6f565b9150509250925092565b600080600060608486031215611f8d57600080fd5b611f9684611e13565b9250611fa460208501611e13565b9150604084013590509250925092565b60008060408385031215611fc757600080fd5b82359150611fd760208401611e13565b90509250929050565b600060208284031215611ff257600080fd5b61144982611e13565b6000806040838503121561200e57600080fd5b61201783611e13565b91506020830135801515811461202c57600080fd5b809150509250929050565b6000806000806080858703121561204d57600080fd5b61205685611e13565b935061206460208601611e13565b925060408501359150606085013567ffffffffffffffff81111561208757600080fd5b61209387828801611e6f565b91505092959194509250565b600080604083850312156120b257600080fd5b6120bb83611e13565b9150611fd760208401611e13565b600181811c908216806120dd57607f821691505b6020821081036120fd57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808335601e1984360301811261211a57600080fd5b83018035915067ffffffffffffffff82111561213557600080fd5b6020019150368190038213156117f757600080fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561049f5761049f61214a565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600083516121d3818460208801611d97565b8351908301906121e7818360208801611d97565b01949350505050565b601f82111561067357600081815260208120601f850160051c810160208610156122175750805b601f850160051c820191505b8181101561223657828155600101612223565b505050505050565b815167ffffffffffffffff81111561225857612258611e59565b61226c8161226684546120c9565b846121f0565b602080601f8311600181146122a157600084156122895750858301515b600019600386901b1c1916600185901b178555612236565b600085815260208120601f198616915b828110156122d0578886015182559484019460019091019084016122b1565b50858210156122ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561049f5761049f61214a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b8183823760009101908152919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123ab816017850160208801611d97565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123dc816028840160208801611d97565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061241b90830184611dbb565b9695505050505050565b60006020828403121561243757600080fd5b815161144981611d64565b6000600182016124545761245461214a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826124805761248061245b565b500490565b6000826124945761249461245b565b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b808202811582820484141761049f5761049f61214a565b6000816124eb576124eb61214a565b50600019019056fea264697066735822122015b83bcf05f5c7f6706d170f1593a51063a3215a06057aef07a91dd70a375b4864736f6c63430008110033"
